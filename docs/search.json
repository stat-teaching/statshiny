[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "shiny/sampdist.html",
    "href": "shiny/sampdist.html",
    "title": "statshiny",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\n\n# Define UI\nui &lt;- fluidPage(\n    titlePanel(\"Sampling Distribution Simulator\"),\n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"n\", \"Sample Size (n):\", \n                        min = 1, max = 100, value = 30, step = 1),\n            sliderInput(\"mean\", \"Mean:\", \n                        min = 0, max = 10, value = 0, step = 0.1),\n            sliderInput(\"sd\", \"Standard Deviation:\", \n                        min = 0.1, max = 10, value = 1, step = 0.1),\n            numericInput(\"B\", \"Number of Replications (B):\", \n                         1e3, min = 1, max = 1e6),\n            textInput(\"fun\", \"Function (e.g., mean, sd):\", value = \"mean\"),\n            checkboxInput(\"fixAxis\", \"Fix x-axis limits?\", value = FALSE),\n            conditionalPanel(\n                condition = \"input.fixAxis == true\",\n                numericInput(\"xMin\", \"X-axis Minimum:\", value = -10, step = 1),\n                numericInput(\"xMax\", \"X-axis Maximum:\", value = 10, step = 1)\n            ),\n            actionButton(\"simulate\", \"Simulate\")\n        ),\n        mainPanel(\n            plotOutput(\"histPlot\")\n        )\n    )\n)\n\n# Define server logic\nserver &lt;- function(input, output) {\n    # Function for generating the sampling distribution\n    sampdist &lt;- function(n, mean = 0, sd = 1, B = 1e3, FUN) {\n        replicate(\n            B,\n            {\n                x &lt;- rnorm(n, mean, sd)\n                FUN(x)\n            }\n        )\n    }\n    \n    # Reactive value to store simulation results\n    simData &lt;- reactiveVal(NULL)\n    \n    # Simulate when the button is clicked\n    observeEvent(input$simulate, {\n        # Parse function from user input\n        FUN &lt;- match.fun(input$fun)\n        \n        # Generate sampling distribution\n        results &lt;- sampdist(\n            n = input$n,\n            mean = input$mean,\n            sd = input$sd,\n            B = input$B,\n            FUN = FUN\n        )\n        \n        # Update reactive value\n        simData(results)\n    })\n    \n    # Render histogram\n    output$histPlot &lt;- renderPlot({\n        results &lt;- simData()\n        \n        # Ensure results are available\n        if (is.null(results)) return()\n        \n        # Determine x-axis limits\n        xlim &lt;- if (input$fixAxis) {\n            c(input$xMin, input$xMax)\n        } else {\n            #c(input$mean - input$sd*5, input$mean + input$sd*5)\n            range(results)\n        }\n        \n        # Plot histogram\n        hist(results, \n             main = paste(\"Sampling Distribution of\", input$fun),\n             breaks = 50,\n             xlab = sprintf(\"%s(x)\", input$fun),\n             col = \"dodgerblue\", \n             border = \"black\",\n             cex.lab = 1.5,\n             cex.main = 1.5,\n             xlim = )\n    }, height = 500, width = 700)\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "statshiny",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\nprova"
  },
  {
    "objectID": "shiny/power.html",
    "href": "shiny/power.html",
    "title": "statshiny",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(cowplot)\nlibrary(latex2exp)\n\n# Define UI for the app\nui &lt;- fluidPage(\n    titlePanel(\"Power Analysis Visualization\"),\n    \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"h0\", \"Null Hypothesis (H0):\", \n                        min = 0, max = 5, value = 0, step = 0.1),\n            sliderInput(\"d\", \"Effect size:\", \n                        min = 0, max = 2, value = 0.5, step = 0.1),\n            sliderInput(\"n\", \"Sample size:\", \n                        min = 1, max = 1000, value = 30, step = 1),\n            sliderInput(\"alpha\", \"Significance Level (α):\", \n                        min = 0.01, max = 1, value = 0.05, step = 0.01),\n            checkboxInput(\"fixAxis\", \"Fix x-axis limits?\", value = FALSE),\n            conditionalPanel(\n                condition = \"input.fixAxis == true\",\n                numericInput(\"xMin\", \"X-axis Minimum:\", value = -1, step = 0.1),\n                numericInput(\"xMax\", \"X-axis Maximum:\", value = 1, step = 0.1)\n            ),\n        ),\n        \n        mainPanel(\n            h3(\"Power Analysis Plot\"),\n            plotOutput(\"powerPlot\")\n        )\n    )\n)\n\n# Define server logic\nserver &lt;- function(input, output) {\n    # Function to create the power plot\n    plot_inference &lt;- function(d = 0,\n                               n,\n                               h0 = 0,\n                               alpha = 0.05,\n                               p.value = FALSE,\n                               do = NULL,\n                               lb = NULL,\n                               ub = NULL){\n        h1 &lt;- h0 + d\n        s &lt;- 1\n        se0 &lt;- sqrt(s/n + s/n)\n        se1 &lt;- sqrt(s/n + s/n)\n        zc &lt;- abs(qnorm(alpha/2, h0, se0))\n        md &lt;- (h0 + h1) / 2\n        if(is.null(lb)) lb &lt;- md - se0*5\n        if(is.null(ub)) ub &lt;- md + se0*5\n        \n        quiet &lt;- function(x) {\n            suppressMessages(\n                suppressWarnings(\n                    x\n                )\n            )\n        }\n        \n        dnorm0 &lt;- function(x, mean = h0, sd = se0){\n            dnorm(x, mean, sd)\n        }\n        \n        # null hypothesis plot\n        ph0 &lt;- ggplot(data = data.frame(x = c(lb, ub))) +\n            stat_function(aes(x = x),\n                          fun = dnorm0,\n            ) +\n            geom_area(stat = \"function\",\n                      aes(fill = \"Type-1 Error α\"),\n                      fun = dnorm0,\n                      xlim = c(zc, ub),\n                      alpha = 0.5) +\n            geom_area(stat = \"function\",\n                      fun = dnorm0,\n                      xlim = c(lb, -zc),\n                      fill = scales::alpha(\"red\", 0.5),\n                      alpha = 0.5) +\n            ggtitle(latex2exp::TeX(sprintf(\"$H_0: \\\\; d = %s$\", h0))) +\n            theme_minimal(base_size = 15) +\n            theme(legend.title = element_blank(),\n                  axis.title.y = element_blank(),\n                  axis.text.y = element_blank(),\n                  axis.ticks.y = element_blank(),\n                  legend.position = c(0.85, 0.90),\n                  plot.title = element_text(hjust = 0.5)) +\n            xlab(latex2exp::TeX(\"$t(x)_o$\")) +\n            scale_fill_manual(values = c(scales::alpha(\"red\", 0.5)),\n                              labels = latex2exp::TeX(\"Type-1 error $\\\\alpha$\")) +\n            geom_vline(xintercept = c(-zc, zc), lty = \"dashed\") +\n            geom_segment(aes(x = h0, xend = h0, y = 0, yend = dnorm0(h0)))\n        # alternative hypothesis plot\n        \n        dnorm1 &lt;- function(x, mean = h1, sd = se1){\n            dnorm(x, mean, sd)\n        }\n        \n        ph1 &lt;- ggplot(data = data.frame(x = c(lb, ub))) +\n            stat_function(aes(x = x),\n                          fun = dnorm1) +\n            geom_area(stat = \"function\",\n                      aes(fill = \"Type-2 Error (β)\"),\n                      args = list(mean = h1),\n                      fun = dnorm1,\n                      xlim = c(-zc, zc),\n                      alpha = 0.5) +\n            geom_area(stat = \"function\",\n                      args = list(mean = h1),\n                      fun = dnorm1,\n                      aes(fill = \"Power (1 - β)\"),\n                      xlim = c(zc, ub),\n                      alpha = 0.5) +\n            geom_area(stat = \"function\",\n                      args = list(mean = h1),\n                      fun = dnorm1,\n                      xlim = c(lb, -zc),\n                      fill = \"dodgerblue\",\n                      alpha = 0.5) +\n            scale_fill_manual(values = c(\"dodgerblue\", \"black\"),\n                              labels = c(latex2exp::TeX(\"Power ($1 - \\\\beta$)\"),\n                                         latex2exp::TeX(\"Type-2 Error ($\\\\beta$)\"))) +\n            geom_vline(xintercept = c(-zc, zc), linetype = \"dashed\") +\n            theme_minimal(base_size = 15) +\n            theme(legend.title = element_blank(),\n                  plot.title = element_text(hjust = 0.5),\n                  axis.title.y = element_blank(),\n                  axis.text.y = element_blank(),\n                  legend.position = c(0.85, 0.90)) +\n            ggtitle(latex2exp::TeX(sprintf(\"$H_1: \\\\; d \\\\neq 0$ ($d = %s$)\", d))) +\n            geom_segment(aes(x = h1, xend = h1, y = 0, yend = dnorm1(h1))) +\n            xlab(\"t(x)\")\n        if(p.value){\n            if(is.null(do)){\n                stop(\"When p.value is TRUE, the observed statistics to need to be provided!\")\n            }\n            ph0 &lt;- ph0 +\n                geom_area(stat = \"function\",\n                          fun = dnorm0,\n                          aes(fill = \"p value\"),\n                          xlim = c(do, ub),\n                          alpha = 1) +\n                scale_fill_manual(values = c(\"purple\", scales::alpha(\"red\", 0.5))) +\n                geom_vline(xintercept = do) +\n                annotate(\"label\", x = do, y = dnorm(0)/2, label = latex2exp::TeX(\"$t(x)_o$\"))\n            quiet(print(ph0))\n        } else{\n            ph0 &lt;- ph0 +\n                theme(axis.text.x = element_blank(),\n                      axis.title.x = element_blank())\n            quiet(\n                cowplot::plot_grid(ph0, ph1, nrow = 2, align = \"hv\")\n            )\n        }\n    }\n    \n    # Render the plot\n    output$powerPlot &lt;- renderPlot({\n        if(input$fixAxis){\n            lb &lt;- input$xMin\n            ub &lt;- input$xMax\n        }else{\n            lb &lt;- ub &lt;- NULL\n        }\n        plot_inference(h0 = input$h0, d = input$d, n = input$n, alpha = input$alpha,\n                       lb = lb, ub = ub)\n    },\n    height = 500, width = 700)\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)"
  }
]