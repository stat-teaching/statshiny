[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "shiny/sampdist.html",
    "href": "shiny/sampdist.html",
    "title": "statshiny",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\n\n# Define UI\nui &lt;- fluidPage(\n    titlePanel(\"Sampling Distribution Simulator\"),\n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"n\", \"Sample Size (n):\", \n                        min = 1, max = 100, value = 30, step = 1),\n            sliderInput(\"mean\", \"Mean:\", \n                        min = 0, max = 10, value = 0, step = 0.1),\n            sliderInput(\"sd\", \"Standard Deviation:\", \n                        min = 0.1, max = 10, value = 1, step = 0.1),\n            numericInput(\"B\", \"Number of Replications (B):\", \n                         1e3, min = 1, max = 1e6),\n            textInput(\"fun\", \"Function (e.g., mean, sd):\", value = \"mean\"),\n            checkboxInput(\"fixAxis\", \"Fix x-axis limits?\", value = FALSE),\n            conditionalPanel(\n                condition = \"input.fixAxis == true\",\n                numericInput(\"xMin\", \"X-axis Minimum:\", value = -10, step = 1),\n                numericInput(\"xMax\", \"X-axis Maximum:\", value = 10, step = 1)\n            ),\n            actionButton(\"simulate\", \"Simulate\")\n        ),\n        mainPanel(\n            plotOutput(\"histPlot\")\n        )\n    )\n)\n\n# Define server logic\nserver &lt;- function(input, output) {\n    # Function for generating the sampling distribution\n    sampdist &lt;- function(n, mean = 0, sd = 1, B = 1e3, FUN) {\n        replicate(\n            B,\n            {\n                x &lt;- rnorm(n, mean, sd)\n                FUN(x)\n            }\n        )\n    }\n    \n    # Reactive value to store simulation results\n    simData &lt;- reactiveVal(NULL)\n    \n    # Simulate when the button is clicked\n    observeEvent(input$simulate, {\n        # Parse function from user input\n        FUN &lt;- match.fun(input$fun)\n        \n        # Generate sampling distribution\n        results &lt;- sampdist(\n            n = input$n,\n            mean = input$mean,\n            sd = input$sd,\n            B = input$B,\n            FUN = FUN\n        )\n        \n        # Update reactive value\n        simData(results)\n    })\n    \n    # Render histogram\n    output$histPlot &lt;- renderPlot({\n        results &lt;- simData()\n        \n        # Ensure results are available\n        if (is.null(results)) return()\n        \n        # Determine x-axis limits\n        xlim &lt;- if (input$fixAxis) {\n            c(input$xMin, input$xMax)\n        } else {\n            NULL\n        }\n        \n        # Plot histogram\n        hist(results, \n             main = paste(\"Sampling Distribution of\", input$fun),\n             breaks = 50,\n             xlab = sprintf(\"%s(x)\", input$fun),\n             col = \"dodgerblue\", \n             border = \"black\",\n             cex.lab = 1.5,\n             cex.main = 1.5,\n             xlim = xlim)\n    }, height = 500, width = 1000)\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "statshiny",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\nprova"
  }
]